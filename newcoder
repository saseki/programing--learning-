/*时间限制：1秒
空间限制：32768K
牛牛举办了一次编程比赛,参加比赛的有3*n个选手,每个选手都有一个水平值a_i.现在要将这些选手进行组队,一共组成n个队伍,即每个队伍3人.牛牛发现队伍的水平值等于该队伍队员中第二高水平值。
例如:
一个队伍三个队员的水平值分别是3,3,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是3,2,3.那么队伍的水平值是3
一个队伍三个队员的水平值分别是1,5,2.那么队伍的水平值是2
为了让比赛更有看点,牛牛想安排队伍使所有队伍的水平值总和最大。
如样例所示:
如果牛牛把6个队员划分到两个队伍
如果方案为:
team1:{1,2,5}, team2:{5,5,8}, 这时候水平值总和为7.
而如果方案为:
team1:{2,5,8}, team2:{1,5,5}, 这时候水平值总和为10.
没有比总和为10更大的方案,所以输出10.

输入描述:
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)

第二行包括3*n个整数a_i(1 ≤ a_i ≤ 10^9),表示每个参赛选手的水平值.


输出描述:
输出一个整数表示所有队伍的水平值总和最大值.

输入例子:
2
5 2 8 5 1 5

输出例子:
10*/
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main()
    {
    int n;
    cin>>n;
    vector<long long>  num;
    num.resize(3*n);
    for(int i=0;i<3*n;i++) 
        cin>>num[i];
     //贪婪法   每次选第二大的作为该组的中间值 循环n次
    sort(num.begin(),num.end());//先排序 
    long long res=0;
    for(int i=0;i<n;i++)
        {
        res+=num[n+2*i];
    }
    cout<<res<<endl;
    return 0;
}

--------------------------------------------------------------------------------------------------------
/*时间限制：1秒
空间限制：32768K
牛牛现在有一个n个数组成的数列, 牛牛现在想取一个连续的子序列, 并且这个子序列还必须得满足:最多只改变一个数, 就可以使得这个连续的子序列是一个严格上升的子序列, 牛牛想知道这个连续子序列最长的长度是多少。
输入描述 :
输入包括两行, 第一行包括一个整数n(1 ≤ n ≤ 10 ^ 5), 即数列的长度;
第二行n个整数a_i, 表示数列中的每个数(1 ≤ a_i ≤ 10 ^ 9), 以空格分割。


输出描述 :
输出一个整数, 表示最长的长度。

输入例子 :
6
7 2 3 1 5 6

输出例子 :
	 5
*/
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
//因为只有一个数可以发生变化  可以假设该变化发生在i位置      不难得出 最大严格递增连续子序列的 是一定包括该发生变化的位置的
//遍历数组  尝试着去更改该位置上的数  并算出包括了该位置的最长序列的长度  所有的中取最大就是所求
int main()
{
	int n;
	cin >> n;
	vector<long long>  num;
	vector<int>  lenofstart;//lenofstart[i]是以第i个元素起始的严格递增最大长度
	vector<int>  lenofend;//lenofend[i]是以第i个元素结束的严格递增最大长度
	num.resize(n);
	lenofstart.resize(n);
	lenofend.resize(n);
	for (int i = 0; i<n; i++)
		cin >> num[i];
	lenofend[0] = 1;//
	lenofstart[n - 1] = 1;//初值为1
	for (int i = n - 2; i >= 0; i--)//从右往左算lenofstart
	{
		lenofstart[i] = (num[i]<num[i + 1]) ? (lenofstart[i + 1] + 1) : 1;
	}
	for (int i = 1; i<n; i++)//从左往右算lenofend
	{
		lenofend[i] = (num[i]>num[i - 1]) ? (lenofend[i - 1] + 1) : 1;
	}
	long long res = max(lenofstart[1] + 1, lenofend[n - 2] + 1);//当尝试的位置在两端时  只有一端  特殊处理直接加到这一端去
	//遍历所有的位置 尝试只改这个位置的数
	for (int i = 1; i<n - 1; i++)//
	{
		long long  temp = 0;//temp是改了之后 包括了该位置的最大序列长度
		if (num[i + 1] - num[i - 1]>1)//当i位置前 后 相差超过2  可以将这两段连起来一个更长的
			temp = lenofend[i - 1] + lenofstart[i + 1] + 1;
		else//不能连起来   只能将这个数加到其中 打的一端去
			temp = max(lenofend[i - 1], lenofstart[i + 1]) + 1;

		res = max(res, temp);//更新大的max
	}

	cout << res << endl;
	return 0;
}
------------------------------------------------------------------------------------------------------------
时间限制：1秒
空间限制：32768K
牛牛定义排序子序列为一个数组中一段连续的子序列,并且这段子序列是非递增或者非递减排序的。牛牛有一个长度为n的整数数组A,他现在有一个任务是把数组A分为若干段排序子序列,牛牛想知道他最少可以把这个数组分为几段排序子序列.
如样例所示,牛牛可以把数组A划分为[1,2,3]和[2,2,1]两个排序子序列,至少需要划分为2个排序子序列,所以输出2 
输入描述:
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)

第二行包括n个整数A_i(1 ≤ A_i ≤ 10^9),表示数组A的每个数字。


输出描述:
输出一个整数表示牛牛可以将A最少划分为多少段排序子序列

输入例子:
6
1 2 3 2 2 1

输出例子:
2

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main()
{
	int n;
	cin >> n;
	vector<int>  num;
	num.resize(n);
	for (int i = 0; i<n; i++)
		cin >> num[i];
    int res=0;
    //贪婪法  每次先决定当前元素是属于非递减段还是非递增段  尽可能的右扩
    for(int i=0;i<n;i++)//每次进入该循环 i都是指向新一段的第一个元素   最后的i++是必要的 原因如下
        {
        res++;
        while(i+1<n&&num[i]==num[i+1])//一直相等 当前还无法判断这一段是递增还是递减
            {
            i++;
        }
        if(i+1==n)
            {
            break;
        }
        if(num[i]!=num[i+1])
            {
            if(num[i]>num[i+1])//是递减段
                {//尽可能往右扩 此while结束 i是前一段的最后一个位置 下一次循环时 i要加一 i是新的一段的索引
                while(i+1<n&&num[i]>=num[i+1])
                    {
                    i++;
                }
                continue;
            }        
            else//递增段
                {
                 while(i+1<n&&num[i]<=num[i+1])//尽可能往右扩 此while结束 i是前一段的最后一个位置
                     {
                     i++;
                 }
                continue;
            }
        }
    }
	cout << res << endl;
	return 0;
}
