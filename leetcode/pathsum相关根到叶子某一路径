/*
Total Accepted: 158544
Total Submissions: 472149
Difficulty: Easy
Contributor: LeetCode
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
*/
class Solution {
public:
	bool hasPathSum(TreeNode* root, int sum) {
		if (root == NULL)//如果该节点为空 了说明了不存在这么路径
			return false;
		if (!root->left&&!root->right)//递归终止条件 必须叶子节点的值为sum 说明存在根到叶子节点的路径
		{
			if (root->val == sum)
			return true;
		}
    //将该节点的值纳入   在该节点左右子树 找（sum-root->val）的值  有一个就可以
		return hasPathSum(root->left, sum - (root->val)) || hasPathSum(root->right, sum - (root->val));

	}
};
//同上 用递归
113. Path Sum II Add to List
DescriptionHintsSubmissionsSolutions
Total Accepted: 123120
Total Submissions: 375590
Difficulty: Medium
Contributor: LeetCode
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
          vector<vector<int>> res;
          vector<int >  temp;
          solve(root,sum,temp,res);
          return res;
    }
 private://复习递归   temp放当前递归一层是  存放的路径  res是最后的结果 在 以root为跟的路径上找和为sum的路径
    void  solve(TreeNode* root,int sum,vector<int> &temp,vector<vector<int>> &res)
    {
        if(root==NULL)
        return ;//递归终止
        if(!root->left&&!root->right)
        {
            if(root->val==sum)//叶子节点  并且该叶子节点和带求的sum相等说明该路径是 满足要求的   将其压入 
            {
                temp.push_back(sum);
                res.push_back(temp);
                temp.pop_back();
                return;
            }
        }
        temp.push_back(root->val);//将该节点值加入temp
        solve(root->left,sum-root->val,temp,res);//
        solve(root->right,sum-root->val,temp,res);
        temp.pop_back();//注意回溯 取消该层递归造成的影响
        return ;
        
    }
};

437. Path Sum III Add to List
DescriptionHintsSubmissionsSolutions
Total Accepted: 25412
Total Submissions: 64464
Difficulty: Easy
Contributors:
Stomach_ache
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
不要求一定过根节点也不一定要以叶子节点结尾   但是只能向下取数 求满足和为sum的路径数目
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
//以root跟节点的树中找 和为sum的路径 返回路径数目（不要求 一定要取root）
    int pathSum(TreeNode* root, int sum) {
        if(root==NULL)
        return 0;
        int res=findpath(root,sum);/z找取root 的路径数目
        res+=pathSum(root->left,sum);//不取该root 在左右 子上找寻 sum的路径数目
        res+=pathSum(root->right,sum);
        return res;
    }
    private:
    //在root为根节点的树中，寻找包含了root节点的路径，且和为sum   不要求到叶子节点
    //返回路径个数
 int  findpath(TreeNode* root,int num)
 {
     if(root==NULL)//不要求为叶子节点 所以NULL为终止条件
     return 0;
     int res=0;
     if(root->val==num)//该节点的val==sum res+1
       res+=1;
     res+=findpath(root->left,num-root->val);
     res+=findpath(root->right,num-root->val);
     return res;
 }
};
